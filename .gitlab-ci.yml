cache:
  key: "${CI_BUILD_REF_NAME} node:alpine"
  paths:
    - node_modules
stages:
  - build
  - test
  - release
  - deploy
build:
  stage: build
  image: node:alpine
  # variables:
  #   NODE_ENV: "development"
  before_script:
    - apk add --update bash
    - apk add --update git && rm -rf /tmp/* /var/cache/apk/*
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
      - .next
    #  - server/
    #  - public/
test:
  stage: test
  image: node:alpine
  variables:
    NODE_ENV: "test"
  script:
    - npm run test:coverage -- -u
release:
  stage: release
  image: docker:latest
  only:
    - "master"
    - "production"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  before_script:
    - docker version
    - "docker info"
    - "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/client:latest --pull ."
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/nginx:latest --pull ./_nginx"
    # - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/api:latest --pull ./_api"
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/client:latest"
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/nginx:latest"
    # - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/api:latest"
  after_script:
    - "docker logout $CI_REGISTRY"
deploy:
  stage: deploy
  image: sgillespie/gitlab-runner
  # image: gitlab/dind:latest
  only:
    - "production"
  environment: production
  services:
    - docker:dind
  before_script:
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    # - scp -r .env ./docker-compose.prod.yml root@${DEPLOY_SERVER_IP}:~/
    - scp -r ./docker-compose.prod.yml root@${DEPLOY_SERVER_IP}:~/
    - ssh root@$DEPLOY_SERVER_IP "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker-compose -f docker-compose.prod.yml stop
    - docker-compose -f docker-compose.prod.yml rm client --force
    - docker-compose -f docker-compose.prod.yml rm nginx --force
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}/client:latest
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}/nginx:latest
    - docker-compose -f docker-compose.prod.yml up -d"